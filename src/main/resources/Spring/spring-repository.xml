<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/jdbc
        http://www.springframework.org/schema/jdbc/spring-jdbc.xsd">

	<!-- 配置数据源 -->
	<context:property-placeholder location="classpath:jdbc.properties" />
	<context:component-scan base-package="com.sprd.test.af.base.servlet" />
	<context:component-scan base-package="com.sprd.test.af.quartz" />
	<context:component-scan base-package="com.sprd.test.af.service.impl" >
	   <context:include-filter type="annotation" expression="org.springframework.stereotype.Service"/>
	   <!-- 拦截所有的在service层使用 @service注解的类  主要是为了层级更加清晰以及避免注解乱用-->
	   <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>
	
	
	<bean id="local" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<property name="driverClassName" value="${dataSource_local.driver}" />
		<property name="url" value="${dataSource_local.url}" />
		<property name="username" value="${dataSource_local.username}" />
		<property name="password" value="${dataSource_local.password}" />

		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="20" />
		<property name="minIdle" value="30" />
		<property name="maxActive" value="100" />

		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />

		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />

		<property name="validationQuery" value="SELECT 'x'" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />

		<!-- 打开PSCache，并且指定每个连接上PSCache的大小,mysql不支持 -->
		<property name="poolPreparedStatements" value="false" />
		<property name="maxPoolPreparedStatementPerConnectionSize"
			value="20" />
 		<property name="removeAbandoned" value="true" /> <!-- 打开removeAbandoned功能 -->
        <property name="removeAbandonedTimeout" value="1800" /> <!-- 1800秒，也就是30分钟 -->
		<!-- 配置监控统计拦截的filters -->
		<property name="filters" value="stat" />
	</bean>

	<bean id="bugzilla" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<property name="driverClassName" value="${dataSource_bugzilla.driver}" />
		<property name="url" value="${dataSource_bugzilla.url}" />
		<property name="username" value="${dataSource_bugzilla.username}" />
		<property name="password" value="${dataSource_bugzilla.password}" />
		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="20" />
		<property name="minIdle" value="30" />
		<property name="maxActive" value="50" />

		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />

		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />

		<property name="validationQuery" value="SELECT 'x'" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />

		<property name="removeAbandoned" value="true" /> <!-- 打开removeAbandoned功能 -->
        <property name="removeAbandonedTimeout" value="1800" /> <!-- 1800秒，也就是30分钟 -->
		<!-- 配置监控统计拦截的filters -->
		<property name="filters" value="stat" />
	</bean>

	<bean id="tpm" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<property name="driverClassName" value="${dataSource_tpm.driver}" />
		<property name="url" value="${dataSource_tpm.url}" />
		<property name="username" value="${dataSource_tpm.username}" />
		<property name="password" value="${dataSource_tpm.password}" />
		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="30" />
		<property name="minIdle" value="30" />
		<property name="maxActive" value="50" />


		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />

		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />

		<property name="validationQuery" value="SELECT 'x'" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />

		<property name="removeAbandoned" value="true" /> <!-- 打开removeAbandoned功能 -->
        <property name="removeAbandonedTimeout" value="1800" /> <!-- 1800秒，也就是30分钟 -->
		<!-- 配置监控统计拦截的filters -->
		<property name="filters" value="stat" />
	</bean>

	<bean id="dataSource" class="com.sprd.test.af.base.servlet.MultipleDataSource">
		<property name="defaultTargetDataSource" ref="local"></property>
		<property name="targetDataSources">
			<map key-type="java.lang.String">
				<entry value-ref="local" key="local"></entry>
				<entry value-ref="bugzilla" key="bugzilla"></entry>
				<entry value-ref="tpm" key="tpm"></entry>
			</map>
		</property>
	</bean>

	<bean id="pageInterceptor" class="com.github.pagehelper.PageHelper">
		<property name="properties">
			<value>
				dialect=mysql
				reasonable=true
			</value>
		</property>
	</bean>

	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 自动扫描mapping.xml文件 -->
		<property name="mapperLocations" value="classpath*:Mybatis/**/*.xml" />
		<property name="typeAliasesPackage" value="com.sprd.test.af.entity" />
		<property name="plugins">
			<list>
				<ref bean="pageInterceptor" />
			</list>
		</property>
	</bean>

	<!-- 跨域拦截器 <bean id="handlerInterceptor" class="com.sprd.test.af.base.servlet.CORSInterceptor"/> 
		<bean class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"> 
		<property name="interceptors"> <list> <ref bean="handlerInterceptor"/> </list> 
		</property> </bean> -->

	<!-- 这里指定了要扫描的映射接口的路径 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.sprd.test.af.dao" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>

	<bean id="druid-stat-interceptor" class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor"></bean>
	<bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut" scope="prototype">
		<property name="patterns">
			<list>
			    <value>com.sprd.test.af.controller.*</value>
				<value>com.sprd.test.af.service.*</value>
				<value>com.sprd.test.af.dao.*</value>
			</list>
		</property>
	</bean>
	<aop:config>
		<aop:advisor advice-ref="druid-stat-interceptor" pointcut-ref="druid-stat-pointcut" />
	</aop:config>

	<!-- 配置事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<!-- 采用@Transactional注解方式使用事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" />

	<aop:aspectj-autoproxy />
</beans>